const servicoCora = require('../servicos/servicoCora');
const validadorCpf = require('../utilitarios/validadorCpf'); // Renomeado para 'validadorCpf' para consist√™ncia

const consultarBoletos = async (req, res) => {
    const { cpf } = req.body;

    // 1. Valida√ß√£o inicial do CPF
    if (!cpf) {
        console.warn('‚ö†Ô∏è Requisi√ß√£o recebida sem CPF.');
        return res.status(400).json({ erro: 'CPF √© obrigat√≥rio.' });
    }

    // 2. Valida o formato e os d√≠gitos do CPF
    if (!validadorCpf.validar(cpf)) {
        console.warn(`‚ö†Ô∏è Tentativa de consulta com CPF inv√°lido: ${cpf}`);
        return res.status(400).json({ erro: 'CPF inv√°lido. Por favor, verifique o n√∫mero digitado.' });
    }

    // Limpa o CPF para garantir que apenas n√∫meros sejam passados para o servi√ßo
    const cpfLimpo = validadorCpf.limpar(cpf);

    try {
        // 3. Chama o servi√ßo Cora para buscar os boletos.
        // O servi√ßo j√° retorna os boletos atrasados e o pr√≥ximo a vencer de forma estruturada.
        const { boletosAtrasados, proximoBoletoAVencer } = await servicoCora.consultarBoletosPorCpf(cpfLimpo);

        // 4. Verifica se nenhum boleto foi encontrado
        if (boletosAtrasados.length === 0 && !proximoBoletoAVencer) {
            console.log(`üìÑ Nenhum boleto ativo encontrado para o CPF: ${cpfLimpo}`);
            return res.status(404).json({ erro: 'Nenhum boleto ativo encontrado para o CPF fornecido.' });
        }

        // 5. Prepara a lista de boletos para a resposta, aplicando os status desejados
        let boletosParaExibir = [];

        // Adiciona todos os boletos atrasados, marcando-os como 'ATRASADO'
        boletosAtrasados.forEach(boleto => {
            boletosParaExibir.push({ ...boleto, status: 'ATRASADO' });
        });

        // Adiciona o pr√≥ximo boleto a vencer, se existir e ainda n√£o estiver na lista (para evitar duplicatas)
        if (proximoBoletoAVencer) {
            const isDuplicate = boletosParaExibir.some(b => b.id === proximoBoletoAVencer.id);
            if (!isDuplicate) {
                boletosParaExibir.push({ ...proximoBoletoAVencer, status: 'A VENCER' }); // Ou 'PENDENTE'
            }
        }

        // 6. Ordena a lista final de boletos para exibi√ß√£o
        // Prioriza boletos atrasados, depois ordena por data de vencimento (do mais antigo para o mais recente)
        boletosParaExibir.sort((a, b) => {
            // Boletos atrasados v√™m primeiro
            if (a.status === 'ATRASADO' && b.status !== 'ATRASADO') return -1;
            if (a.status !== 'ATRASADO' && b.status === 'ATRASADO') return 1;
            // Se ambos s√£o atrasados ou ambos s√£o "a vencer", ordena pela data de vencimento
            return new Date(a.due_date) - new Date(b.due_date);
        });

        console.log(`‚úÖ Boletos consultados com sucesso para o CPF: ${cpfLimpo}. Total de ${boletosParaExibir.length} boletos para exibir.`);
        return res.status(200).json({ boletos: boletosParaExibir });

    } catch (error) {
        console.error(`‚ùå Erro no controlador ao consultar boletos para o CPF ${cpfLimpo}:`, error.message);
        // Em caso de erro, retorna uma mensagem gen√©rica para o cliente
        return res.status(500).json({ erro: 'Erro interno ao consultar boletos. Por favor, tente novamente mais tarde.' });
    }
};

module.exports = {
    consultarBoletos
};
